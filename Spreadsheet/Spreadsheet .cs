// Class implemented by Wei-Tung Tang Feb-23-2018

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml;
using System.Xml.Schema;
using Dependencies;
using Formulas;

namespace SS
{
    /// <summary>
    /// This class extends AbstractSpreadsheet and it contains an infinite number of cells. 
    /// It is responsible for setting and obtaining cell information contained in the object
    /// that generated by the class.
    /// </summary>
    public class Spreadsheet : AbstractSpreadsheet
    {
        /// <summary>
        /// This dictionary contains all the cells.
        /// </summary>
        private Dictionary<string, Cell> cellList = new Dictionary<string, Cell>();

        /// <summary>
        /// Used to store all the dependency among cells.
        /// </summary>
        private DependencyGraph graph = new DependencyGraph();

        /// <summary>
        /// Used to store the valid check for incoming cell name and content
        /// </summary>
        private Regex IsValid;

        /// <summary>
        /// Zero-argument constructor that is used to initialize an empty spreadsheet and assign
        /// a regex that accepts every string
        /// </summary>
        public Spreadsheet()
        {
            Changed = false;
            // set IsValid to accept every incoming string
            IsValid = new Regex("^.*$");
        }

        /// <summary>
        /// One-argument constructor that is used to set IsValid
        /// </summary>
        /// <param name="isValid"></param>
        public Spreadsheet(Regex isValid)
        {
            Changed = false;
            IsValid = isValid;
        }

        /// <summary>
        /// /// Creates a Spreadsheet that is a duplicate of the spreadsheet saved in source.
        ///
        /// See the AbstractSpreadsheet.Save method and Spreadsheet.xsd for the file format 
        /// specification.  
        ///
        /// If there's a problem reading source, throws an IOException.
        ///
        /// Else if the contents of source are not consistent with the schema in Spreadsheet.xsd, 
        /// throws a SpreadsheetReadException.  
        ///
        /// Else if the IsValid string contained in source is not a valid C# regular expression, throws
        /// a SpreadsheetReadException.  (If the exception is not thrown, this regex is referred to
        /// below as oldIsValid.)
        ///
        /// Else if there is a duplicate cell name in the source, throws a SpreadsheetReadException.
        /// (Two cell names are duplicates if they are identical after being converted to upper case.)
        ///
        /// Else if there is an invalid cell name or an invalid formula in the source, throws a 
        /// SpreadsheetReadException.  (Use oldIsValid in place of IsValid in the definition of 
        /// cell name validity.)
        ///
        /// Else if there is an invalid cell name or an invalid formula in the source, throws a
        /// SpreadsheetVersionException.  (Use newIsValid in place of IsValid in the definition of
        /// cell name validity.)
        ///
        /// Else if there's a formula that causes a circular dependency, throws a SpreadsheetReadException. 
        ///
        /// Else, create a Spreadsheet that is a duplicate of the one encoded in source except that
        /// the new Spreadsheet's IsValid regular expression should be newIsValid.
        /// </summary>
        /// <param name="source"></param>
        /// <param name="newIsValid"></param>
        public Spreadsheet(TextReader source, Regex newIsValid)
        {
            Changed = false;

            // Create an XmlSchemaSet object.
            XmlSchemaSet sc = new XmlSchemaSet();
            string name;
            string contents;
            
            // a regex placeholder for regex value embedded inside of source file
            Regex oldIsValid = null;
            // a regex to check cell name
            Regex formatCheck = new Regex(@"^[a-zA-Z][a-zA-Z]*[1-9][0-9]*$");


            // NOTE: To read states3.xsd this way, it must be stored in the same folder with the
            // executable.  To arrange this, I set the "Copy to Output Directory" propery of states3.xsd to
            // "Copy If Newer", which will copy states3.xsd as part of each build (if it has changed
            // since the last build).
            sc.Add(null, "Spreadsheet.xsd");

            // Configure validation
            XmlReaderSettings settings = new XmlReaderSettings
            {
                ValidationType = ValidationType.Schema,
                Schemas = sc
            };
            // if an error occurs while reading the source, ValidationCallback will be triggered
            settings.ValidationEventHandler += ValidationCallback;

            using (XmlReader reader = XmlReader.Create(source, settings))
            {
                while (reader.Read())
                {
                    if (reader.IsStartElement())
                    {
                        // check if a spreadsheet tag exists
                        if (reader.Name.Equals("spreadsheet"))
                        {
                            // check if the regex embedded is a valid C# regex
                            if (CheckRegex(reader["IsValid"]))
                            {
                                oldIsValid = new Regex(reader["IsValid"]);
                            }
                            else
                            {
                                throw new SpreadsheetReadException("Invalid C# regular expression");
                            }
                        }

                        // begin to assign name and contents into current Spreadsheet
                        if (reader.Name.Equals("cell"))
                        {
                            name = reader["name"];
                            contents = reader["contents"];

                            if (cellList.Keys.Contains(name.ToUpper()))
                            {
                                throw new SpreadsheetReadException("A duplicated named cell detected");
                            }

                            // check validity for name using oldIsValid
                            if (!formatCheck.IsMatch(name) || !oldIsValid.IsMatch(name))
                            {
                                throw new SpreadsheetReadException("Invalid cell name in the source.");
                            }

                            // check validity for name using newIsValid
                            if (!formatCheck.IsMatch(name) || !newIsValid.IsMatch(name))
                            {
                                throw new SpreadsheetVersionException("Invalid cell name in the source.");
                            }

                            // if contents contains a formula, do the following checks
                            if (contents.StartsWith("="))
                            {
                                string temp = contents.Remove(0, 1);

                                try
                                {
                                    // check validity for formula using oldIsValid by imposing extra regex
                                    Formula f = new Formula(temp, s => s.ToUpper(), s => oldIsValid.IsMatch(s));
                                }
                                catch
                                {
                                    throw new SpreadsheetReadException("Invalid formula in the source.");
                                }

                                try
                                {
                                    // check validity for formula using newIsValid by imposing extra regex
                                    Formula f = new Formula(temp, s => s.ToUpper(), s => newIsValid.IsMatch(s));
                                }
                                catch
                                {
                                    throw new SpreadsheetVersionException("Invalid formula in the source.");
                                }
                            }

                            // if all data are valid, prepare to set cell contents
                            IsValid = newIsValid;
                            SetContentsOfCell(name, contents);
                        }
                    }
                    // reset temporary strings
                    name = "";
                    contents = "";
                }
            }
        }

        // Display any validation errors.
        private static void ValidationCallback(object sender, ValidationEventArgs e)
        {
            throw new SpreadsheetReadException("There is an error reading the source");
        }
        
        /// <summary>
        /// If name is null or invalid, throws an InvalidNameException.
        /// 
        /// Otherwise, returns the contents (as opposed to the value) of the named cell.  The return
        /// value should be either a string, a double, or a Formula.
        /// </summary>
        public override object GetCellContents(string name)
        {
            CheckParameters(name);
            name = name.ToUpper();
            if (cellList.Keys.Contains(name))
            {
                return cellList[name].Content;
            }

            // if the spreadsheet does not contain such cell, simply return an empty string.
            return "";
        }

        /// <summary>
        /// If name is null or invalid, throws an InvalidNameException.
        /// 
        /// Otherwise, the contents of the named cell becomes number.  The method returns a
        /// set consisting of name plus the names of all other cells whose value depends, 
        /// directly or indirectly, on the named cell.
        /// 
        /// For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
        /// set {A1, B1, C1} is returned.
        /// </summary>
        protected override ISet<string> SetCellContents(string name, double number)
        {
            name = name.ToUpper();
            Changed = true;
            HashSet<string> set = new HashSet<string>();

            // Replace current cell's content for update
            graph.ReplaceDependees(name, new List<string>());

            // Generate a new cell if such named cell doesn't exists yet, or simply replace the existing 
            // cell with new information
            GenerateCellInfo(name, number);

            // Add current cell name in the ISet
            set.Add(name);

            // return a set that contains all the cell's dependents, including itself
            set = new HashSet<string>(GetCellsToRecalculate(name));

            // Update current named cell's dependee's content, value and dependency 
            UpdateCellInfo(set, name);

            return set;

        }

        /// <summary>
        /// If text is null, throws an ArgumentNullException.
        /// 
        /// Otherwise, if name is null or invalid, throws an InvalidNameException.
        /// 
        /// Otherwise, the contents of the named cell becomes text.  The method returns a
        /// set consisting of name plus the names of all other cells whose value depends, 
        /// directly or indirectly, on the named cell.
        /// 
        /// For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
        /// set {A1, B1, C1} is returned.
        /// </summary>
        protected override ISet<string> SetCellContents(string name, string text)
        {
            name = name.ToUpper();
            Changed = true;

            HashSet<string> set = new HashSet<string>();
            //reset the graph

            // Replace current cell's content for update
            graph.ReplaceDependees(name, new List<string>());

            // Generate a new cell if such named cell doesn't exists yet, or simply replace the existing 
            // cell with new information
            GenerateCellInfo(name, text);

            // Add current cell name in the ISet
            set.Add(name);

            // return a set that contains all the cell's dependents, including itself
            foreach (string var in GetCellsToRecalculate(name))
            {
                set.Add(var);
            }

            // Update current named cell's dependent's content, value and dependency 
            UpdateCellInfo(set, name);
            return set;

        }

        /// <summary>
        /// Requires that all of the variables in formula are valid cell names.
        /// 
        /// If name is null or invalid, throws an InvalidNameException.
        /// 
        /// Otherwise, if changing the contents of the named cell to be the formula would cause a 
        /// circular dependency, throws a CircularException.
        /// 
        /// Otherwise, the contents of the named cell becomes formula.  The method returns a
        /// Set consisting of name plus the names of all other cells whose value depends,
        /// directly or indirectly, on the named cell.
        /// 
        /// For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
        /// set {A1, B1, C1} is returned.
        /// </summary>
        protected override ISet<string> SetCellContents(string name, Formula formula)
        {
            name = name.ToUpper();
            
            // check if passed in formula contains a dependent of the named cell
            // to prevent a ciruclar dependency
            //foreach(string token in GetDirectDependents(name))
            //{
            //    if(formula.ToString().Contains(token))
            //    {
            //        throw new CircularException();
            //    }
            //}

            

            HashSet<string> set = new HashSet<string>();

            // A backup spreadsheet for revert in case a CircularException is thrown
            Dictionary<string, Cell> tempDict = new Dictionary<string, Cell>();

            // A backup DependencyGraph for revert in case a CircularException is thrown
            DependencyGraph tempGraph = new DependencyGraph(graph);

            //create a copy for the spreadsheet
            foreach (KeyValuePair<string, Cell> key in cellList)
            {
                tempDict.Add(key.Key, key.Value);
            }

            // Replace current cell's content for update
            graph.ReplaceDependees(name, new List<string>());

            // Create dependency relationship between cell and valid variables generated by Formula
            foreach (string var in formula.GetVariables())
            {
                CheckParameters(var);
                graph.AddDependency(var, name);
            }

            // Generate a new cell if such named cell doesn't exists yet, or simply replace the existing 
            // cell with new information
            GenerateCellInfo(name, formula);
            set.Add(name);

            // This try catch block is used to detect possible Circular dependency by calling GetCellsToRecalculate()
            try
            {
                foreach (string var in GetCellsToRecalculate(name))
                {
                    set.Add(var);
                }
            }
            catch (CircularException e)
            {
                // If a CircularException is caught, revert the entire operation.
                cellList = tempDict;
                graph = tempGraph;
                Changed = false;
                throw e;
            }

            // Update current named cell's dependee's content, value and dependency 
            UpdateCellInfo(set, name);
            Changed = true;
            return set;
        }

        /// <summary>
        /// Enumerates the names of all the non-empty cells in the spreadsheet.
        /// </summary>
        public override IEnumerable<string> GetNamesOfAllNonemptyCells()
        {
            List<string> list = new List<string>();

            foreach (KeyValuePair<string, Cell> current in cellList)
            {
                // These two conditions must be met before adding any cell names.
                if (!(current.Value.Content == null) && !(current.Value.Content.Equals("")))
                {
                    list.Add(current.Key);
                }
            }
            return list;

        }

        /// <summary>
        /// If name is null, throws an ArgumentNullException.
        /// 
        /// Otherwise, if name isn't a valid cell name, throws an InvalidNameException.
        /// 
        /// Otherwise, returns an enumeration, without duplicates, of the names of all cells whose
        /// values depend directly on the value of the named cell.  In other words, returns
        /// an enumeration, without duplicates, of the names of all cells that contain
        /// formulas containing name.
        /// 
        /// For example, suppose that
        /// A1 contains 3
        /// B1 contains the formula A1 * A1
        /// C1 contains the formula B1 + A1
        /// D1 contains the formula B1 - C1
        /// The direct dependents of A1 are B1 and C1
        /// </summary>
        protected override IEnumerable<string> GetDirectDependents(string name)
        {
            CheckParameters(name);
            HashSet<string> list = new HashSet<string>();

            // Make sure the named cell has any dependent before adding it to the list
            // Otherwise, return an empty list.
            if (graph.HasDependents(name))
            {
                foreach (string dependent in graph.GetDependents(name))
                {
                    list.Add(dependent);
                }
            }

            return list;
        }

        /// <summary>
        /// This private helper checks if the cell names are valid. If not, throw an InvalidNameException
        /// </summary>
        /// <param name="param"></param>
        private void CheckParameters(string param)
        {
            Regex formatCheck = new Regex(@"^[a-zA-Z][a-zA-Z]*[1-9][0-9]*$");
            if (param == null || !formatCheck.IsMatch(param) || !IsValid.IsMatch(param.ToUpper()))
                throw new InvalidNameException();
        }

        /// <summary>
        /// This private helper updates a newly modified cell .
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        private void GenerateCellInfo(string name, object value)
        {
            Cell newCell = new Cell()
            {
                Name = name.ToUpper(),
                Content = value
 
            };

            // if passed in value is a formula, try to evaluate it
            if (value.GetType().Equals(new Formula().GetType()))
            {
                Formula temp = (Formula)value;

                try
                {
                    newCell.Value = temp.Evaluate(Lookup);
                }
                catch
                {
                    newCell.Value = new FormulaError();
                }
            }
            else
            {
                newCell.Value = value;
            }

            if (cellList.Keys.Contains(name.ToUpper()))
            {
                cellList[name.ToUpper()].Name = newCell.Name;
                cellList[name.ToUpper()].Content = newCell.Content;
                cellList[name.ToUpper()].Value = newCell.Value;
                
            }
            else
            {
                cellList.Add(name.ToUpper(), newCell);
            }
        }

        /// <summary>
        /// Writes the contents of this spreadsheet to dest using an XML format.
        /// The XML elements should be structured as follows:
        ///
        /// <spreadsheet IsValid="IsValid regex goes here">
        ///   <cell name="cell name goes here" contents="cell contents go here"></cell>
        ///   <cell name="cell name goes here" contents="cell contents go here"></cell>
        ///   <cell name="cell name goes here" contents="cell contents go here"></cell>
        /// </spreadsheet>
        ///
        /// The value of the IsValid attribute should be IsValid.ToString()
        /// 
        /// There should be one cell element for each non-empty cell in the spreadsheet.
        /// If the cell contains a string, the string (without surrounding double quotes) should be written as the contents.
        /// If the cell contains a double d, d.ToString() should be written as the contents.
        /// If the cell contains a Formula f, f.ToString() with "=" prepended should be written as the contents.
        ///
        /// If there are any problems writing to dest, the method should throw an IOException.
        /// </summary>
        public override void Save(TextWriter dest)
        {
            using (XmlWriter writer = XmlWriter.Create(dest))
            {
                // Compose IsValid info
                writer.WriteStartDocument();
                writer.WriteStartElement("spreadsheet");
                writer.WriteAttributeString("IsValid", IsValid.ToString());

                try
                {
                    // try to compose spreadsheet info with each cell attributes
                    foreach (KeyValuePair<string, Cell> token in cellList)
                    {
                        writer.WriteStartElement("cell");
                        writer.WriteAttributeString("name", token.Key.ToUpper());

                        object temp = GetCellContents(token.Key);

                        // if cell content is a formula, prepend a "=" identifier onto the contents attribute
                        // else, compose it as a regular string
                        if (temp.GetType().Equals(new Formula().GetType()))
                        {
                            writer.WriteAttributeString("contents", "=" + temp.ToString());
                        }
                        else
                        {
                            writer.WriteAttributeString("contents", temp.ToString());
                        }
                        
                        writer.WriteEndElement();
                    }
                }
                catch (Exception)
                {
                    throw new IOException("There is a problem writing to dest.");
                }


                writer.WriteEndElement();
                writer.WriteEndDocument();
            }
            Changed = false;
        }

        /// <summary>
        /// If name is null or invalid, throws an InvalidNameException.
        ///
        /// Otherwise, returns the value (as opposed to the contents) of the named cell.  The return
        /// value should be either a string, a double, or a FormulaError.
        /// </summary>
        public override object GetCellValue(string name)
        {
            CheckParameters(name);
            name = name.ToUpper();
            if (cellList.Keys.Contains(name))
            {
                return cellList[name].Value;
            }
            return "";
        }

        /// <summary>
        /// If content is null, throws an ArgumentNullException.
        ///
        /// Otherwise, if name is null or invalid, throws an InvalidNameException.
        ///
        /// Otherwise, if content parses as a double, the contents of the named
        /// cell becomes that double.
        ///
        /// Otherwise, if content begins with the character '=', an attempt is made
        /// to parse the remainder of content into a Formula f using the Formula
        /// constructor with s => s.ToUpper() as the normalizer and a validator that
        /// checks that s is a valid cell name as defined in the AbstractSpreadsheet
        /// class comment.  There are then three possibilities:
        ///
        ///   (1) If the remainder of content cannot be parsed into a Formula, a
        ///       Formulas.FormulaFormatException is thrown.
        ///
        ///   (2) Otherwise, if changing the contents of the named cell to be f
        ///       would cause a circular dependency, a CircularException is thrown.
        ///
        ///   (3) Otherwise, the contents of the named cell becomes f.
        ///
        /// Otherwise, the contents of the named cell becomes content.
        ///
        /// If an exception is not thrown, the method returns a set consisting of
        /// name plus the names of all other cells whose value depends, directly
        /// or indirectly, on the named cell.
        ///
        /// For example, if name is A1, B1 contains A1*2, and C1 contains B1+A1, the
        /// set {A1, B1, C1} is returned.
        /// </summary>
        public override ISet<string> SetContentsOfCell(string name, string content)
        {
            if (content == null)
                throw new ArgumentNullException();

            CheckParameters(name);

            // if content can be parsed into a double, call SetCellContents that takes double as an argument
            if (Double.TryParse(content, out double result))
            {
                return SetCellContents(name, result);
            }

            // if content contains "=" token, try to parse it by using Formula and call SetCellContents that 
            // takes Formula as an argument
            if (content.StartsWith("="))
            {
                string temp = content.Remove(0, 1);
                Formula formula = new Formula(temp, s=>s.ToUpper(), s => IsValid.IsMatch(s));
                return SetCellContents(name, formula); 
            }

            // otherwise content is just a regular string, call SetCellContents that takes text as an argument
            return SetCellContents(name, content);

        }

        /// <summary>
        /// True if this spreadsheet has been modified since it was created or saved
        /// (whichever happened most recently); false otherwise.
        /// </summary>
        public override bool Changed { get; protected set; }

        /// <summary>
        /// This private helper function will attempt to parse the cell value if a matching double value is found
        /// If found, it will return a corresponding double value to the formula.evaluate to aid evaluation
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private double Lookup(String name)
        {
            try
            {
                return (double)cellList[name.ToUpper()].Value;
            }
            catch
            {
                throw new Exception();
            }
        }

        /// <summary>
        /// This private helper function determine if the regex embedded in source file is a valid C# regex
        /// </summary>
        /// <param name="regexPattern"></param>
        /// <returns></returns>
        private bool CheckRegex(string regexPattern)
        {
            if (string.IsNullOrEmpty(regexPattern))
                return false;

            try
            {
                // Attempt to figure out if regexPattern is valid
                Regex.Match("", regexPattern);
            }
            catch (ArgumentException)
            {
                return false;
            }

            return true;
        }

        /// <summary>
        /// This private helper function will be called right after GetCellsToRecalculate is returned.
        /// It will attempt to identify every direct dependent and update their dependency relationship.
        /// </summary>
        /// <param name="set"></param>
        /// <param name="name"></param>
        private void UpdateCellInfo(ISet<string> set, string name)
        {
            foreach (string token in set)
            {
                // if a newly updated named cell has a direct dependent in which it contains a formula,
                // a formula evaluation will be attempted to see if it can be successfully evaluated into
                // a double value. If not, it will update all the direct dependents' value.
                if (!token.Equals(name) && GetCellContents(token).GetType().Equals(new Formula().GetType()))
                {
                    Formula temp = new Formula(GetCellContents(token).ToString());
                    try
                    {
                        cellList[token].Value = temp.Evaluate(Lookup);
                    }
                    catch
                    {
                        cellList[token].Value = new FormulaError();
                    }
                }
            }
        }
    }


}
